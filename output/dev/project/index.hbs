import "reflect-metadata";
import type { AppContext, AppPlugin } from "@tsdiapi/server";
import { {{pascalCase name}}Provider } from "./provider";

export type PluginOptions = {
  {{#if withBootstrapFiles}}
  bootstrapFilesGlobPath?: string;
  {{/if}}
};

const defaultConfig: PluginOptions = {
  {{#if withBootstrapFiles}}
  bootstrapFilesGlobPath: "*.{{name}}{.ts,.js}",
  {{/if}}
};

let providerRef: {{pascalCase name}}Provider | null = null;

class App implements AppPlugin {
  name = "tsdiapi-{{name}}";
  config: PluginOptions;
  
  {{#if withBootstrapFiles}}
  bootstrapFilesGlobPath?: string;
  {{/if}}
  
  context: AppContext;
  provider: {{pascalCase name}}Provider;

  constructor(config?: PluginOptions) {
    this.config = { ...defaultConfig, ...config };

    {{#if withBootstrapFiles}}
    this.bootstrapFilesGlobPath = this.config.bootstrapFilesGlobPath;
    {{/if}}

    // Temporary logger (will be replaced in onInit)
    this.provider = new {{pascalCase name}}Provider(this.config, console as any);
  }

  async onInit(ctx: AppContext) {
    if (providerRef) {
      ctx.logger.warn("{{pascalCase name}} plugin is already initialized. Skipping re-initialization.");
      return;
    }

    this.context = ctx;
    // Replace the temporary logger with the app logger
    this.provider = new {{pascalCase name}}Provider(this.config, ctx.logger);
    this.provider.init();

    providerRef = this.provider;
    ctx.logger.info(`{{pascalCase name}} plugin initialized!`);
  }
}

export function get{{pascalCase name}}Provider(): {{pascalCase name}}Provider {
  if (!providerRef) {
    throw new Error("{{pascalCase name}} plugin is not initialized. Use createPlugin() first.");
  }
  return providerRef;
}

export default function createPlugin(config?: PluginOptions) {
  return new App(config);
}
